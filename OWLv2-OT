{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9952909,"sourceType":"datasetVersion","datasetId":6119645}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install moviepy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:45:09.595613Z","iopub.execute_input":"2024-11-20T01:45:09.595956Z","iopub.status.idle":"2024-11-20T01:45:31.436805Z","shell.execute_reply.started":"2024-11-20T01:45:09.595920Z","shell.execute_reply":"2024-11-20T01:45:31.435969Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"Collecting moviepy\n  Downloading moviepy-1.0.3.tar.gz (388 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m388.3/388.3 kB\u001b[0m \u001b[31m13.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hCollecting decorator<5.0,>=4.0.2 (from moviepy)\n  Downloading decorator-4.4.2-py2.py3-none-any.whl.metadata (4.2 kB)\nRequirement already satisfied: tqdm<5.0,>=4.11.2 in /opt/conda/lib/python3.10/site-packages (from moviepy) (4.66.4)\nRequirement already satisfied: requests<3.0,>=2.8.1 in /opt/conda/lib/python3.10/site-packages (from moviepy) (2.32.3)\nCollecting proglog<=1.0.0 (from moviepy)\n  Downloading proglog-0.1.10-py3-none-any.whl.metadata (639 bytes)\nRequirement already satisfied: numpy>=1.17.3 in /opt/conda/lib/python3.10/site-packages (from moviepy) (1.26.4)\nRequirement already satisfied: imageio<3.0,>=2.5 in /opt/conda/lib/python3.10/site-packages (from moviepy) (2.34.1)\nCollecting imageio_ffmpeg>=0.2.0 (from moviepy)\n  Downloading imageio_ffmpeg-0.5.1-py3-none-manylinux2010_x86_64.whl.metadata (1.6 kB)\nRequirement already satisfied: pillow>=8.3.2 in /opt/conda/lib/python3.10/site-packages (from imageio<3.0,>=2.5->moviepy) (10.3.0)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from imageio_ffmpeg>=0.2.0->moviepy) (70.0.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.8.1->moviepy) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.8.1->moviepy) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.8.1->moviepy) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3.0,>=2.8.1->moviepy) (2024.8.30)\nDownloading decorator-4.4.2-py2.py3-none-any.whl (9.2 kB)\nDownloading imageio_ffmpeg-0.5.1-py3-none-manylinux2010_x86_64.whl (26.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m26.9/26.9 MB\u001b[0m \u001b[31m74.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading proglog-0.1.10-py3-none-any.whl (6.1 kB)\nBuilding wheels for collected packages: moviepy\n  Building wheel for moviepy (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for moviepy: filename=moviepy-1.0.3-py3-none-any.whl size=110721 sha256=8525e6e6001561e512763906afaf878f9c4b6604110872eaf662b969c130c3e1\n  Stored in directory: /root/.cache/pip/wheels/96/32/2d/e10123bd88fbfc02fed53cc18c80a171d3c87479ed845fa7c1\nSuccessfully built moviepy\nInstalling collected packages: proglog, imageio_ffmpeg, decorator, moviepy\n  Attempting uninstall: decorator\n    Found existing installation: decorator 5.1.1\n    Uninstalling decorator-5.1.1:\n      Successfully uninstalled decorator-5.1.1\nSuccessfully installed decorator-4.4.2 imageio_ffmpeg-0.5.1 moviepy-1.0.3 proglog-0.1.10\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"from transformers import AutoProcessor, AutoModelForZeroShotObjectDetection\nimport torch\nfrom torch.utils.data import DataLoader, Dataset\nfrom PIL import Image, ImageDraw\nimport requests\nimport cv2\nimport numpy as np\nimport time\nfrom IPython.display import display\nfrom moviepy.editor import VideoFileClip\nimport os\nfrom concurrent.futures import ThreadPoolExecutor\nfrom itertools import chain\nfrom tqdm import tqdm\nimport json\nimport copy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:45:35.333106Z","iopub.execute_input":"2024-11-20T01:45:35.333481Z","iopub.status.idle":"2024-11-20T01:45:51.210424Z","shell.execute_reply.started":"2024-11-20T01:45:35.333446Z","shell.execute_reply":"2024-11-20T01:45:51.209726Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"VIDEO_PATH = \"/kaggle/input/dataset-hackathon\"\nMODEL_PATH = \"google/owlv2-large-patch14-ensemble\"\nBATCH_SIZE = 1\nVIDEO_LENGTH = 78","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:47:37.486243Z","iopub.execute_input":"2024-11-20T01:47:37.486603Z","iopub.status.idle":"2024-11-20T01:47:37.490902Z","shell.execute_reply.started":"2024-11-20T01:47:37.486573Z","shell.execute_reply":"2024-11-20T01:47:37.489970Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"timestamps = np.arange(0, VIDEO_LENGTH, 0.5)\nvideo_paths = [os.path.join(VIDEO_PATH, video) for video in os.listdir(VIDEO_PATH)]\n\ndef extract_frame_at_timestamp(video_path, timestamp):\n    cap = cv2.VideoCapture(video_path)\n    \n    fps = cap.get(cv2.CAP_PROP_FPS)\n    frame_number = int(timestamp * fps)\n    \n    cap.set(cv2.CAP_PROP_POS_FRAMES, frame_number)\n    \n    ret, frame = cap.read()\n    if not ret:\n        cap.release()\n        return None\n    \n    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    cap.release()\n    \n    frame_image = Image.fromarray(frame_rgb)\n    return frame_image\n\ndef process_video(video_path):\n    frames = []\n    for timestamp in timestamps:\n        frame_image = extract_frame_at_timestamp(video_path, timestamp)\n        if frame_image:\n            frames.append(frame_image)\n    return frames\n\nwith ThreadPoolExecutor() as executor:\n    results = list(executor.map(process_video, video_paths))\n\nimg_list = list(chain.from_iterable(results))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:47:42.779088Z","iopub.execute_input":"2024-11-20T01:47:42.779468Z","iopub.status.idle":"2024-11-20T01:53:28.723523Z","shell.execute_reply.started":"2024-11-20T01:47:42.779435Z","shell.execute_reply":"2024-11-20T01:53:28.722554Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"image_processor = AutoProcessor.from_pretrained(MODEL_PATH)\nmodel = AutoModelForZeroShotObjectDetection.from_pretrained(MODEL_PATH).to(\"cuda\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:53:40.299117Z","iopub.execute_input":"2024-11-20T01:53:40.299812Z","iopub.status.idle":"2024-11-20T01:53:52.400187Z","shell.execute_reply.started":"2024-11-20T01:53:40.299777Z","shell.execute_reply":"2024-11-20T01:53:52.399240Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"preprocessor_config.json:   0%|          | 0.00/427 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c3a5cfaf8ae7466cb478063f70ff57ef"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/1.10k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"44858fa91aea419989d17bc7cd3376ba"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.json:   0%|          | 0.00/1.06M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c575b820ce4d4ed089faa1dcc78416c8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"merges.txt:   0%|          | 0.00/525k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9342c7bdad8b4ba7a0c2e8f0ec36aa1d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"added_tokens.json:   0%|          | 0.00/67.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"476797f546c145ada717960519280d2f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/121 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6147294fb6f7491894cfa3342c11078c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/617 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"67cd26d2b4d442a5a0e12f8d4f3493f0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/1.75G [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f33897c19607445cb2eed1603ffe87c8"}},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"class CustomDataset(Dataset):\n    def __init__(self, data_dict, text_queries, image_processor):\n        self.pixel_values = []\n        self.input_ids = []\n        self.attention_masks = []\n\n        for img, query in zip(data_dict[85:150], text_queries[85:150]):\n            inputs = image_processor(text=query, images=img, return_tensors=\"pt\")\n            self.pixel_values.append(inputs[\"pixel_values\"].squeeze(0))\n            self.input_ids.append(inputs[\"input_ids\"].squeeze(0))\n            self.attention_masks.append(inputs[\"attention_mask\"].squeeze(0))\n\n    def __len__(self):\n        return len(self.pixel_values)\n\n    def __getitem__(self, idx):\n        return {\n            \"pixel_values\": self.pixel_values[idx],\n            \"input_ids\": self.input_ids[idx],\n            \"attention_mask\": self.attention_masks[idx]\n        }\n\ntext_queries = [[\"a small dark spherical object\"] for i in range(len(img_list))]\ndataset = CustomDataset(img_list,text_queries,image_processor)\ndata_loader = DataLoader(dataset, batch_size=BATCH_SIZE, pin_memory=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:57:48.790545Z","iopub.execute_input":"2024-11-20T01:57:48.790878Z","iopub.status.idle":"2024-11-20T01:58:12.862468Z","shell.execute_reply.started":"2024-11-20T01:57:48.790849Z","shell.execute_reply":"2024-11-20T01:58:12.861725Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"\"\"\"text_queries = [[\"a small green spherical object\"] for i in range(len(img_list))]\ninputs = image_processor(text=text_queries, images=img_list, return_tensors=\"pt\")\"\"\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T23:21:48.278555Z","iopub.execute_input":"2024-11-19T23:21:48.278875Z","iopub.status.idle":"2024-11-19T23:22:24.904845Z","shell.execute_reply.started":"2024-11-19T23:21:48.278849Z","shell.execute_reply":"2024-11-19T23:22:24.904111Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"\"\"\"class CustomDataset(Dataset):\n    def __init__(self, data_dict):\n        self.pixel_values = data_dict[\"pixel_values\"]\n        self.input_ids = data_dict[\"input_ids\"]\n        self.attention_mask = data_dict[\"attention_mask\"]\n\n    def __len__(self):\n        return len(self.pixel_values)\n\n    def __getitem__(self, idx):\n        return {\n            \"pixel_values\": self.pixel_values[idx],\n            \"input_ids\": self.input_ids[idx],\n            \"attention_mask\" : self.attention_mask[idx]\n        }\n\ndataset = CustomDataset(inputs)\ndata_loader = DataLoader(dataset, batch_size=BATCH_SIZE)\"\"\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-19T23:22:30.605963Z","iopub.execute_input":"2024-11-19T23:22:30.606440Z","iopub.status.idle":"2024-11-19T23:22:30.612475Z","shell.execute_reply.started":"2024-11-19T23:22:30.606404Z","shell.execute_reply":"2024-11-19T23:22:30.611482Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"total_output = []\nwith torch.no_grad():\n    for batch in tqdm(data_loader):\n        for k,v in batch.items():\n            batch[k] = v.to(\"cuda\")\n        outputs = model(**batch)\n        total_output.append(image_processor.post_process_object_detection(\n            outputs, \n            threshold=0.1, \n            target_sizes=[(1080,1920)])\n                           )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:58:19.726847Z","iopub.execute_input":"2024-11-20T01:58:19.727435Z","iopub.status.idle":"2024-11-20T01:59:47.632756Z","shell.execute_reply.started":"2024-11-20T01:58:19.727398Z","shell.execute_reply":"2024-11-20T01:59:47.631832Z"}},"outputs":[{"name":"stderr","text":"100%|██████████| 65/65 [01:27<00:00,  1.35s/it]\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"testing = copy.deepcopy(total_output)\nfor scene in testing:\n    for key, value in scene[0].items():\n        if isinstance(value, torch.Tensor):\n            scene[0][key] = value.tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:08:20.843732Z","iopub.execute_input":"2024-11-20T01:08:20.844570Z","iopub.status.idle":"2024-11-20T01:08:20.932657Z","shell.execute_reply.started":"2024-11-20T01:08:20.844534Z","shell.execute_reply":"2024-11-20T01:08:20.932001Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"box_inx = []\n\nfor sublist_index, sublist in enumerate(testing):\n    for d in sublist:\n        if \"boxes\" in d:\n            box_inx.append(d[\"boxes\"])\n\nend_inx = len(img_list) // 3\noutput_json = {\"video3\":box_inx[:end_inx],\n              \"video2\":box_inx[end_inx:end_inx*2],\n              \"video1\":box_inx[end_inx*2:end_inx*3]}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:08:24.871179Z","iopub.execute_input":"2024-11-20T01:08:24.871528Z","iopub.status.idle":"2024-11-20T01:08:24.876544Z","shell.execute_reply.started":"2024-11-20T01:08:24.871497Z","shell.execute_reply":"2024-11-20T01:08:24.875781Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"output_path = \"/kaggle/working/data.json\"\n\nwith open(output_path, \"w\") as json_file:\n    json.dump(output_json, json_file, indent=4)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:08:28.092484Z","iopub.execute_input":"2024-11-20T01:08:28.092880Z","iopub.status.idle":"2024-11-20T01:08:28.101951Z","shell.execute_reply.started":"2024-11-20T01:08:28.092841Z","shell.execute_reply":"2024-11-20T01:08:28.100921Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"output_video_path = \"/kaggle/working/output.mp4\"\nfourcc = cv2.VideoWriter_fourcc(*\"mp4v\")\nfps = 1\nframe_size = (img_list[0].width, img_list[0].height)\nout = cv2.VideoWriter(output_video_path, fourcc, fps, frame_size)\n\nfor frame, result in zip(img_list, total_output):\n    draw = ImageDraw.Draw(frame)\n    boxes = result[0][\"boxes\"]\n    scores = result[0][\"scores\"]\n    labels = result[0][\"labels\"]\n\n    for box, score, label in zip(boxes, scores, labels):\n        x_min, y_min, x_max, y_max = box\n        draw.rectangle([(x_min, y_min), (x_max, y_max)], outline=\"red\", width=3)\n\n    frame_cv2 = cv2.cvtColor(np.array(frame), cv2.COLOR_RGB2BGR)\n    out.write(frame_cv2)\n\nout.release()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-20T01:59:55.378470Z","iopub.execute_input":"2024-11-20T01:59:55.379111Z","iopub.status.idle":"2024-11-20T01:59:56.619136Z","shell.execute_reply.started":"2024-11-20T01:59:55.379075Z","shell.execute_reply":"2024-11-20T01:59:56.618062Z"}},"outputs":[],"execution_count":12}]}